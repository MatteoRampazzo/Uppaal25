<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
broadcast chan start;
broadcast chan wave_started, final_position;
broadcast chan enemy_in_range,spawned,configurated;

int lp = 10;
int first_attack=0;
clock tower_clocl[7];

const int N_CELLS = 7; // numero di celle verdi disponibili
int current_target[N_CELLS]={-1,-1,-1,-1,-1,-1,-1};

bool cellFree[N_CELLS]={true,true,true,true,true,true,true}; // tutte le celle inizialmente libere
int Turrets[N_CELLS]; // se c'è una torretta o no
int turretType[N_CELLS];       // tipo di torretta (BASIC, SNIPER, ...)

typedef struct {
    int x;
    int y;
} Position;
bool rr=false;
const int BASIC = 0;
const int SNIPER = 1;
const int CANNON = 2;
const int N_TURRET_TYPES = 3;

int damage[N_TURRET_TYPES] = {2, 5, 8};     // Danno per tipo
int range[N_TURRET_TYPES]  = {2, 1, 4};     // Raggio per tipo
int f_speed[N_TURRET_TYPES]   = {2, 7, 20};     // Costo per tipo
Position TurretPosition[7];

int en_time[3]={0,2,3};
int enemy_type[5];//1 for circ 2 for square
int spawned_num=0;
int attacked[5];

int NUM_ENEMIES = 5;
int PATH_LENGTH = 10;
int MAP[8][16];
int left[5];


bool used_cells[N_CELLS] = {false,false,false,false,false,false,false};

Position positions[5];
bool alive[5]={true,true,true,true,true}; // per sapere se è ancora attivo
int health[5]={100,100,100,100,100};

// velocità in ticks per ogni nemico (es: quanto deve aspettare tra un passo e l'altro)
int getSpeed(int id) {
    if (enemy_type[id] == 1)//circle
        return 1;
    else if (enemy_type[id] == 2)//square
        return 3;
    return 0;
}


bool isValid(int x, int y) {
    return x &gt;= 0 &amp;&amp; x &lt; 8 &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; 16 &amp;&amp; MAP[x][y] == 1;
}
bool isMain(int x, int y) {
    return x &gt;= 0 &amp;&amp; x &lt; 8 &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; 16 &amp;&amp; MAP[x][y] == 3;
}

const int DX[4] = {1,-1, 0, 0}; // destra, sinistra, su, giù
const int DY[4] = {0, 0,-1, 1};
int prev_x[5] ;
int prev_y[5] ;

int DamageTower(int id) {
    if (enemy_type[id] == 1)//circle
        return 2;
    else if (enemy_type[id] == 2)//square
        return 4;
    return 0;
}

void attackMainTower(int id) {
    lp -= DamageTower(id);
}



int debug1;

int getTarget(int tid) {
    int minDist = 10000;
    int bestId = -1;
    int i,dx,dy;
    int dist=1000;
    tower_clocl[0]=0;
    for(i=0;i&lt;NUM_ENEMIES;i++){
        if (alive[i]==1 and left[i]==0){
            dx = TurretPosition[tid].x - positions[i].x;
            dy = TurretPosition[tid].y - positions[i].y;
            dist = abs(dx) + abs(dy);
        }

        if (dist &lt;= range[turretType[tid]]) {
            // Square prioritization
            return i;
            }
        }
    return -2;
}



void setMap(){
int j;

    //Red Path
    for(j=1;j&lt;5;j++){
        MAP[j][0]=1;
    }
    for(j=0;j&lt;7;j++){
        MAP[4][j]=1;
    }
    for(j=2;j&lt;7;j++){
        MAP[j][7]=1;
        MAP[j][15]=1;
    }
    for(j=7;j&lt;16;j++){
        MAP[1][j]=1;
        MAP[7][j]=1;
    }
    for(j=4;j&lt;7;j++){
        MAP[j][10]=1;
    }
    for(j=11;j&lt;15;j++){
        MAP[4][j]=1;
    }

    //Turrets
    MAP[3][2]=2;
    MAP[5][5]=2;
    MAP[2][8]=2;
    MAP[6][8]=2;
    MAP[5][11]=2;
    MAP[2][14]=2;
    MAP[6][14]=2;



    //Tower
    MAP[4][15]=3;
}

Position green_cells[N_CELLS] = {
  {3,2}, {5,5}, {2,8}, {6,8}, {5,11},{2,14},{6,14}
};



void turretAttack(int tid) {
    int target = getTarget(tid);
    if (target &gt;= 0) {
        health[target] -= damage[turretType[tid]];
        if (health[target] &lt;= 0) {
            alive[target] = 0;
        }
    }
}
</declaration>
	<template>
		<name>User</name>
		<location id="id0" x="-671" y="-399">
			<name x="-722" y="-408">Idle</name>
		</location>
		<location id="id1" x="-552" y="-399">
			<name x="-578" y="-442">configuration</name>
			<label kind="testcodeExit">setMap()</label>
		</location>
		<location id="id2" x="-552" y="-255">
			<name x="-535" y="-263">Playing</name>
		</location>
		<location id="id3" x="-714" y="-255">
			<name x="-773" y="-290">TowerDefeated</name>
		</location>
		<location id="id4" x="-552" y="-323">
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id3"/>
			<nail x="-714" y="-153"/>
			<nail x="-824" y="-161"/>
		</transition>
		<transition id="id6">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-552" y="-306">wave_started!</label>
		</transition>
		<transition id="id7">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-544" y="-374">forall (i : int[0,0]) used_cells[i] == 1
//Edit if less cells are used, unless N_CELLS in int[]</label>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-629" y="-272">lp&lt;=0</label>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-637" y="-399">start!</label>
			<label kind="assignment" x="-637" y="-382">setMap()</label>
			<nail x="-569" y="-399"/>
		</transition>
	</template>
	<template>
		<name>Enemies</name>
		<parameter>int id</parameter>
		<declaration>clock t;</declaration>
		<location id="id10" x="-272" y="-280">
			<name x="-282" y="-314">Idle</name>
		</location>
		<location id="id11" x="-85" y="-280">
			<name x="-103" y="-314">Spawn</name>
		</location>
		<location id="id12" x="-85" y="-102">
			<name x="-76" y="-93">Moving</name>
			<label kind="invariant" x="-68" y="-136">t&lt;=getSpeed(id)</label>
		</location>
		<location id="id13" x="-323" y="-102">
			<name x="-340" y="-136">Attack</name>
		</location>
		<location id="id14" x="-552" y="-102">
			<name x="-569" y="-136">Dead</name>
		</location>
		<location id="id15" x="-323" y="42">
			<name x="-340" y="59">Left</name>
		</location>
		<init ref="id10"/>
		<transition id="id16">
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="guard" x="-476" y="-59">t &gt;= getSpeed(id)</label>
			<label kind="assignment" x="-433" y="-42">left[id]=1</label>
		</transition>
		<transition id="id17">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-501" y="-170">health[id] &lt;= 0</label>
			<label kind="assignment" x="-518" y="-153">alive[id] := false</label>
		</transition>
		<transition id="id18">
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="select" x="204" y="-119">dir:int[0,3]</label>
			<label kind="guard" x="204" y="-102">isValid(positions[id].x + DX[dir], positions[id].y + DY[dir]) &amp;&amp;
      !(positions[id].x + DX[dir] == prev_x[id] &amp;&amp; positions[id].y + DY[dir] == prev_y[id]) &amp;&amp;
      t &gt;= getSpeed(id) and !isMain(positions[id].x + DX[dir], positions[id].y + DY[dir])</label>
			<label kind="assignment" x="212" y="-42">t:=0, prev_x[id] = positions[id].x,
    prev_y[id] = positions[id].y,
    positions[id].x += DX[dir],
    positions[id].y += DY[dir],
debug1=getTarget(0)</label>
			<nail x="-85" y="0"/>
			<nail x="17" y="0"/>
			<nail x="17" y="-101"/>
		</transition>
		<transition id="id19">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="select" x="-289" y="-51">dir:int[0,3]</label>
			<label kind="guard" x="-289" y="-17">t &gt;= getSpeed(id) and 
isMain(positions[id].x + DX[dir], positions[id].y + DY[dir])</label>
			<label kind="synchronisation" x="-289" y="-34">final_position!</label>
			<label kind="assignment" x="-289" y="17">t:=0,attackMainTower(id), attacked[id] = 1</label>
		</transition>
		<transition id="id20">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="select" x="-85" y="-242">i:int[1,2]</label>
			<label kind="guard" x="-85" y="-229">t&gt;=en_time[i]</label>
			<label kind="synchronisation" x="-85" y="-212">spawned!</label>
			<label kind="assignment" x="-85" y="-195">enemy_type[id]=i,t:=0,spawned_num++</label>
		</transition>
		<transition id="id21">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-229" y="-280">wave_started?</label>
		</transition>
	</template>
	<template>
		<name>Tower</name>
		<parameter>int id</parameter>
		<location id="id22" x="-586" y="-93">
			<name x="-637" y="-127">Idle</name>
		</location>
		<location id="id23" x="-246" y="-93">
			<name x="-238" y="-85">Configuration</name>
		</location>
		<location id="id24" x="-510" y="102">
			<name x="-578" y="51">Attack</name>
			<label kind="invariant" x="-765" y="68">f &lt;= f_speed[turretType[id]]</label>
		</location>
		<location id="id25" x="-246" y="93">
			<name x="-229" y="68">Ready</name>
			<label kind="invariant" x="-255" y="110">getTarget(id)&lt;=0</label>
		</location>
		<init ref="id22"/>
		<transition id="id26">
			<source ref="id24"/>
			<target ref="id24"/>
			<label kind="guard" x="-824" y="178">getTarget(id)&gt;=0 and f &gt;=f_speed[turretType[id]]</label>
			<label kind="assignment" x="-730" y="195">turretAttack(id), f := 0</label>
			<nail x="-543" y="195"/>
			<nail x="-603" y="119"/>
		</transition>
		<transition id="id27">
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="guard" x="-340" y="178">f &gt;=f_speed[turretType[id]] and getTarget(id)&lt;0</label>
			<label kind="assignment" x="-331" y="195">f := 0</label>
			<nail x="-383" y="182"/>
		</transition>
		<transition id="id28">
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="assignment" x="-493" y="8">turretAttack(id), f := 0</label>
			<nail x="-374" y="51"/>
			<nail x="-433" y="68"/>
		</transition>
		<transition id="id29">
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="select" x="-221" y="-59">type : int[0,2]</label>
			<label kind="synchronisation" x="-17" y="-8">configurated!</label>
			<label kind="assignment" x="-221" y="-34">TurretPosition[id] = green_cells[id],
turretType[id] = type,
used_cells[id] = true</label>
			<nail x="-246" y="-8"/>
		</transition>
		<transition id="id30">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-561" y="-119">start?</label>
		</transition>
	</template>
	<template>
		<name>Debug</name>
		<declaration>clock cl;</declaration>
		<location id="id31" x="-297" y="0">
		</location>
		<location id="id32" x="-297" y="-170">
			<label kind="invariant" x="-289" y="-153">cl&lt;5</label>
		</location>
		<init ref="id32"/>
		<transition id="id33">
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="guard" x="-297" y="-110">cl&gt;=4</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Enemy1=Enemies(0);
Enemy2=Enemies(1);
Enemy3=Enemies(2);
Enemy4=Enemies(3);
Enemy5=Enemies(4);
Tower1=Tower(0);
Tower2=Tower(1);
Tower3=Tower(2);
Tower4=Tower(3);
Tower5=Tower(4);
Tower6=Tower(5);
Tower7=Tower(6);


// List one or more processes to be composed into a system.
system User, Enemy1,Tower1;
// Enemy2,Enemy3,Enemy4,Enemy5,Tower2,Tower3,Tower4,Tower5,Tower6,Tower7;</system>
	<queries>
	</queries>
</nta>
