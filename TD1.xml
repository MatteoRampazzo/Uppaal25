<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
broadcast chan start;
urgent broadcast chan fire,tower_defeated,dead,tower_win;

const int NUM_ENEMIES = 6;  
const int NUM_GREENCELLS = 7; // numero di celle verdi disponibili
const int NUM_CIRCLE = 3;
const int NUM_SQUARE = 3;

int NSpawnedCircle=0;
int NSpawnedSquare=0;
int CirclePreviousSpawn=0;
int SquarePreviousSpawn=0;

int MainLifePoints = 10;

bool GreenCellsOccupied[NUM_GREENCELLS];

int TurretType[NUM_GREENCELLS];  //One index for every cell (7), can assume 0 fot TurretDisabled , 1 Basic, 2 Cannon, 3 Sniper

const int BASIC = 0;
const int SNIPER = 1;
const int CANNON = 2;
const int N_TURRET_TYPES = 4; //0 not used , 1 basic, 2 cannon, 3 sniper

int TurretDamage[N_TURRET_TYPES] = {0, 2, 5, 8};     // Danno per tipo
int TurretRange[N_TURRET_TYPES]  = {0, 2, 1, 4};     // Raggio per tipo
int TurretSpeed[N_TURRET_TYPES]   = {0, 2, 7, 20};     // Costo per tipo

int EnemyType[NUM_ENEMIES];       // modificato: 5 -&gt; 6             //1 for circ 2 for square
int EnemyLeft[NUM_ENEMIES];             // modificato: 5 -&gt; 6
int EnemySpawnedTime[NUM_ENEMIES];
bool EnemyAlive[NUM_ENEMIES]; // per sapere se è ancora attivo
int EnemyHealth[NUM_ENEMIES];

int EnemyPreviousX[NUM_ENEMIES] ;
int EnemyPreviousY[NUM_ENEMIES] ;

int MAP[8][16];

typedef struct {
    int x;
    int y;
} Position;

Position Positions[6];
Position TurretPosition[7]; //Not very usefull can be replaced in GetTarget Function with greeNUM_GREENCELLS[id]

const int DX[4] = {1,-1, 0, 0}; // destra, sinistra, su, giù
const int DY[4] = {0, 0,-1, 1};



void Initialization(){
    int j;
    for(j=0;j&lt;NUM_GREENCELLS;j++){
        GreenCellsOccupied[j]=false;
    }
    for(j=0;j&lt;NUM_ENEMIES;j++){
        EnemyAlive[j]=true;
    }
}

int getSpeed(int id) { //can be substituted by an array and we can call speed[EnemyType[id]]
    if (EnemyType[id] == 1)//circle
        return 1;
    else if (EnemyType[id] == 2)//square
        return 3;
    return 0;
}

bool isValid(int x, int y) {
    return x &gt;= 0 &amp;&amp; x &lt; 8 &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; 16 &amp;&amp; MAP[x][y] == 1;
}

bool isMain(int x, int y) {
    return x &gt;= 0 &amp;&amp; x &lt; 8 &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; 16 &amp;&amp; MAP[x][y] == 3;
}

int DamageTower(int id) {
    if (EnemyType[id] == 1)      //circle
        return 2;
    else if (EnemyType[id] == 2) //square
        return 4;
    return 0;
}

void attackMainTower(int id) {
    MainLifePoints -= DamageTower(id);
}

double getDistance(int x, int y, int x_c, int y_c) {
    int dx = x - x_c;
    int dy = y - y_c;
    double distance = sqrt(dx*dx+dy*dy);

     return distance;
}

int getTarget(int tid) {
    int r = TurretRange[TurretType[tid]];
    int xc = TurretPosition[tid].x;
    int yc = TurretPosition[tid].y;
    int xe = 0;
    int ye = 0;
    int chosenTarget = -1;

    double minDist = 10000.0;
    double dist;
    int i;

    for(i=0;i&lt;NUM_ENEMIES;i++){
        xe = Positions[i].x;
        ye = Positions[i].y;

        if (EnemyAlive[i]==1 and EnemyLeft[i]==0 and (xe &lt; xc + r and xe &gt; xc - r) and (ye &gt; yc - r and ye &lt; yc + r)){          

            dist = getDistance(xe,ye,xc,yc); //can be simplified

            if(chosenTarget == -1 //first target
                or dist &lt; minDist //target closest to turret
                or (dist == minDist and EnemySpawnedTime[i] &gt; EnemySpawnedTime[chosenTarget]) //same minimum distance =&gt; choose the enemy that has been present for the shortest time
                or (dist == minDist and EnemySpawnedTime[i] == EnemySpawnedTime[chosenTarget] and EnemyType[i]==2 and EnemyType[chosenTarget]==1)) //prioritize attaccking Squares
            {    
                chosenTarget = i;
                minDist = dist;
            }
        }
    }

    return chosenTarget;
}

void setMap(){
int j;

    //Red Path
    for(j=1;j&lt;5;j++){
        MAP[j][0]=1;
    }
    for(j=0;j&lt;7;j++){
        MAP[4][j]=1;
    }
    for(j=2;j&lt;7;j++){
        MAP[j][7]=1;
        MAP[j][15]=1;
    }
    for(j=7;j&lt;16;j++){
        MAP[1][j]=1;
        MAP[7][j]=1;
    }
    for(j=4;j&lt;7;j++){
        MAP[j][10]=1;
    }
    for(j=11;j&lt;15;j++){
        MAP[4][j]=1;
    }

    //Turrets
    MAP[3][2]=2;
    MAP[5][5]=2;
    MAP[2][8]=2;
    MAP[6][8]=2;
    MAP[5][11]=2;
    MAP[2][14]=2;
    MAP[6][14]=2;

    //Tower
    MAP[4][15]=3;
}

Position greeNUM_GREENCELLS[7] = {
 {3,2}, {5,5}, {2,8}, {6,8}, {5,11},{2,14},{6,14}
};


void turretAttack(int tid) {
    int target = getTarget(tid);
    if (target &gt;= 0) {
        EnemyHealth[target] -= TurretDamage[TurretType[tid]];
        if (EnemyHealth[target] &lt;= 0) {
            EnemyAlive[target] = 0;
        }
    }
}
</declaration>
	<template>
		<name>User</name>
		<declaration>clock t;</declaration>
		<location id="id0" x="-765" y="-399">
			<name x="-816" y="-408">Idle</name>
			<label kind="invariant" x="-782" y="-433">t&lt;=0</label>
		</location>
		<location id="id1" x="-552" y="-399">
			<name x="-578" y="-442">configuration</name>
			<label kind="invariant" x="-527" y="-416">t&lt;=0</label>
			<label kind="testcodeExit">setMap()</label>
		</location>
		<location id="id2" x="-552" y="-289">
			<name x="-535" y="-297">Playing</name>
		</location>
		<location id="id3" x="-824" y="-289">
			<name x="-884" y="-323">TowerDefeated</name>
		</location>
		<location id="id4" x="-544" y="-110">
			<name x="-629" y="-144">TowerWin</name>
		</location>
		<init ref="id0"/>
		<transition id="id5">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-535" y="-263">MainLifePoints&gt;0 and 
forall (i : int[0,NUM_ENEMIES-1])
(EnemyAlive[i] == false or EnemyLeft[i]==true)</label>
			<label kind="synchronisation" x="-544" y="-170">tower_win!</label>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-544" y="-382">forall (i : int[0,NUM_GREENCELLS-1]) GreenCellsOccupied[i] == 1</label>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-714" y="-289">MainLifePoints&lt;=0</label>
			<label kind="synchronisation" x="-714" y="-272">tower_defeated!</label>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-731" y="-416">start!</label>
			<label kind="assignment" x="-731" y="-399">setMap(),
Initialization(),
t:=0</label>
			<nail x="-569" y="-399"/>
		</transition>
	</template>
	<template>
		<name>Enemies</name>
		<parameter>int[0,NUM_ENEMIES-1] id</parameter>
		<declaration>clock t;</declaration>
		<location id="id9" x="-450" y="-425">
			<name x="-460" y="-459">Idle</name>
			<label kind="invariant" x="-467" y="-416">t&lt;=0</label>
		</location>
		<location id="id10" x="86" y="-425">
			<name x="68" y="-459">Spawn</name>
			<label kind="invariant" x="102" y="-442">t&lt;=0</label>
		</location>
		<location id="id11" x="93" y="-68">
			<name x="102" y="-59">Moving</name>
			<label kind="invariant" x="76" y="-25">t&lt;=getSpeed(id)</label>
		</location>
		<location id="id12" x="-204" y="76">
			<name x="-272" y="68">Attack</name>
			<label kind="invariant" x="-272" y="93">t &lt;= getSpeed(id)</label>
		</location>
		<location id="id13" x="-204" y="-68">
			<name x="-221" y="-102">Dead</name>
		</location>
		<location id="id14" x="-204" y="187">
			<name x="-221" y="204">EnemyLefted</name>
		</location>
		<location id="id15" x="-42" y="-246">
			<label kind="invariant" x="-187" y="-255">t&lt;=SquarePreviousSpawn</label>
		</location>
		<location id="id16" x="221" y="-255">
			<label kind="invariant" x="238" y="-263">t&lt;=CirclePreviousSpawn</label>
		</location>
		<init ref="id9"/>
		<transition id="id17">
			<source ref="id16"/>
			<target ref="id11"/>
			<label kind="guard" x="195" y="-212">t&gt;=CirclePreviousSpawn</label>
			<label kind="assignment" x="195" y="-195">EnemySpawnedTime[id]=CirclePreviousSpawn,
CirclePreviousSpawn+=2, t:=0</label>
		</transition>
		<transition id="id18">
			<source ref="id10"/>
			<target ref="id16"/>
			<label kind="guard" x="195" y="-374">NSpawnedCircle&lt;NUM_CIRCLE</label>
			<label kind="assignment" x="195" y="-357">NSpawnedCircle++,
EnemyType[id]=1, EnemyHealth[id]=10,
t:=0</label>
		</transition>
		<transition id="id19">
			<source ref="id15"/>
			<target ref="id11"/>
			<label kind="guard" x="-238" y="-204">t&gt;=SquarePreviousSpawn</label>
			<label kind="assignment" x="-229" y="-187">EnemySpawnedTime[id]=SquarePreviousSpawn,
SquarePreviousSpawn+=3, t:=0</label>
		</transition>
		<transition id="id20">
			<source ref="id10"/>
			<target ref="id15"/>
			<label kind="guard" x="-263" y="-374">NSpawnedSquare&lt;NUM_SQUARE</label>
			<label kind="assignment" x="-263" y="-357">NSpawnedSquare++,
EnemyType[id]=2, EnemyHealth[id]=20,
t:=0</label>
		</transition>
		<transition id="id21">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-323" y="-25">EnemyHealth[id]&lt;=0</label>
			<label kind="synchronisation" x="-323" y="-8">dead!</label>
			<nail x="-204" y="0"/>
		</transition>
		<transition id="id22">
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="guard" x="-144" y="-85">EnemyHealth[id]&lt;=0</label>
			<label kind="synchronisation" x="-144" y="-68">dead!</label>
		</transition>
		<transition id="id23">
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="guard" x="-195" y="127">t &gt;= getSpeed(id) and EnemyHealth[id]&gt;0</label>
			<label kind="assignment" x="-187" y="144">EnemyLeft[id]=1</label>
		</transition>
		<transition id="id24">
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="select" x="408" y="-85">dir:int[0,3]</label>
			<label kind="guard" x="408" y="-68">isValid(Positions[id].x + DX[dir], Positions[id].y + DY[dir]) &amp;&amp;
!(Positions[id].x + DX[dir] == EnemyPreviousX[id] &amp;&amp; Positions[id].y + DY[dir] == EnemyPreviousY[id]) &amp;&amp;
t &gt;= getSpeed(id) and !isMain(Positions[id].x + DX[dir], Positions[id].y + DY[dir]) and EnemyAlive[id]==true</label>
			<label kind="assignment" x="409" y="-8">EnemyPreviousX[id] = Positions[id].x,
EnemyPreviousY[id] = Positions[id].y,
Positions[id].x += DX[dir],
Positions[id].y += DY[dir],
t:=0</label>
			<nail x="94" y="-34"/>
			<nail x="323" y="-34"/>
			<nail x="323" y="-68"/>
		</transition>
		<transition id="id25">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="select" x="-119" y="-17">dir:int[0,3]</label>
			<label kind="guard" x="-119" y="0">t &gt;= getSpeed(id) and 
isMain(Positions[id].x + DX[dir], Positions[id].y + DY[dir])
and EnemyAlive[id]==true</label>
			<label kind="assignment" x="-119" y="59">t:=0,attackMainTower(id)</label>
		</transition>
		<transition id="id26">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-399" y="-450">forall (i : int[0,NUM_GREENCELLS-1]) GreenCellsOccupied[i] == 1</label>
			<label kind="assignment" x="-238" y="-425">t:=0</label>
		</transition>
	</template>
	<template>
		<name>Tower</name>
		<parameter>int[0,NUM_GREENCELLS-1] id</parameter>
		<declaration>clock f,t;</declaration>
		<location id="id27" x="-586" y="-93">
			<name x="-603" y="-127">Idle</name>
		</location>
		<location id="id28" x="-246" y="-93">
			<name x="-297" y="-127">Configuration</name>
			<label kind="invariant" x="-178" y="-127">t&lt;=0</label>
		</location>
		<location id="id29" x="-501" y="136">
			<name x="-561" y="102">Attack</name>
			<label kind="invariant" x="-756" y="127">f &lt;= TurretSpeed[TurretType[id]]</label>
		</location>
		<location id="id30" x="-246" y="127">
			<name x="-229" y="102">Ready</name>
		</location>
		<location id="id31" x="-246" y="25">
			<label kind="invariant" x="-289" y="-8">t&lt;=0</label>
		</location>
		<location id="id32" x="110" y="25">
			<name x="59" y="-9">TurretDisabled</name>
		</location>
		<init ref="id27"/>
		<transition id="id33">
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="-238" y="42">TurretType[id]!=0</label>
			<label kind="assignment" x="-238" y="59">GreenCellsOccupied[id] = true</label>
		</transition>
		<transition id="id34">
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-34" y="34">TurretType[id]==0</label>
			<label kind="assignment" x="-34" y="51">GreenCellsOccupied[id] = true</label>
		</transition>
		<transition id="id35">
			<source ref="id28"/>
			<target ref="id31"/>
			<label kind="select" x="-238" y="-76">type : int[0,3]</label>
			<label kind="assignment" x="-238" y="-59">TurretPosition[id] = greeNUM_GREENCELLS[id],
TurretType[id] = type,
t:=0</label>
		</transition>
		<transition id="id36">
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="guard" x="-833" y="187">getTarget(id)&gt;=0 and f &gt;=TurretSpeed[TurretType[id]]</label>
			<label kind="assignment" x="-704" y="204">turretAttack(id), f := 0</label>
			<nail x="-501" y="187"/>
			<nail x="-551" y="187"/>
		</transition>
		<transition id="id37">
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-382" y="195">f &gt;=TurretSpeed[TurretType[id]] and getTarget(id)&lt;0</label>
			<label kind="assignment" x="-374" y="212">f := 0</label>
			<nail x="-374" y="204"/>
		</transition>
		<transition id="id38">
			<source ref="id30"/>
			<target ref="id29"/>
			<label kind="guard" x="-450" y="42">getTarget(id)&gt;=0</label>
			<label kind="synchronisation" x="-399" y="85">fire!</label>
			<label kind="assignment" x="-493" y="25">turretAttack(id), f := 0</label>
			<nail x="-382" y="68"/>
			<nail x="-382" y="68"/>
		</transition>
		<transition id="id39">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-476" y="-93">start?</label>
			<label kind="assignment" x="-467" y="-76">t:=0</label>
		</transition>
	</template>
	<system>
system  Enemies,Tower,User;</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
