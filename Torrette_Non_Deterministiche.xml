<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
//struct
typedef struct {
    int x;
    int y;
} Position;


//const
const int NUM_ENEMIES = 6;  
const int NUM_GREENCELLS = 7; // available green cells
const int NUM_CIRCLE = 3;
const int NUM_SQUARE = 3;

const int BASIC = 0;
const int SNIPER = 1;
const int CANNON = 2;
const int N_TURRET_TYPES = 4; //0 not used , 1 basic, 2 cannon, 3 sniper

const int DX[4] = {1,-1, 0, 0}; // right, left
const int DY[4] = {0, 0,-1, 1}; // up, down


//chan
broadcast chan place_turrets;
urgent broadcast chan fire,tower_defeated,dead,tower_win,time_out;


//var
int MAP[16][8];

int MainLifePoints = 10;
int MaxTime = 100;

int NSpawnedCircle = 0;
int NSpawnedSquare = 0;
int CirclePreviousSpawn = 0;
int SquarePreviousSpawn = 0;
bool TowerWin = false;
bool EnemiesWin = false;
bool TimeOut = false;

int EnemyType[NUM_ENEMIES]; //1 for circ 2 for square
int EnemyLeft[NUM_ENEMIES];
int EnemySpawnedTime[NUM_ENEMIES];
bool EnemyAlive[NUM_ENEMIES]; // to know if it is still active 
int EnemyHealth[NUM_ENEMIES];
int EnemyPreviousX[NUM_ENEMIES];
int EnemyPreviousY[NUM_ENEMIES];

bool GreenCellsOccupied[NUM_GREENCELLS];

int TurretType[NUM_GREENCELLS]; //One index for every cell (7), can assume 0 fot TurretDisabled , 1 Basic, 2 Cannon, 3 Sniper
int TurretDamage[N_TURRET_TYPES] = {0, 2, 5, 8}; // Damage for each type
int TurretRange[N_TURRET_TYPES] = {0, 2, 1, 4}; // Range for each type
int TurretSpeed[N_TURRET_TYPES] = {0, 2, 7, 20}; // Firing speed for each type

Position Positions[NUM_ENEMIES];
Position TurretPosition[NUM_GREENCELLS]; //Not very usefull can be replaced in GetTarget Function with GreenCellsPositions[id]
Position GreenCellsPositions[7] = {{2,3},{5,5},{8,2},{8,6},{11,5},{14,2},{14,6}};


//function
void Initialization(){
    int j;
    for(j=0; j&lt;NUM_GREENCELLS; j++){
        GreenCellsOccupied[j] = false;
    }
    for(j=0; j&lt;NUM_ENEMIES; j++){
        EnemyAlive[j] = true;
    }
}
</declaration>
	<template>
		<name>User</name>
		<declaration>clock t;

void setMap(){
    int j;

    //Red Path
    for(j=1; j&lt;5; j++){
        MAP[0][j] = 1;
    }
    for(j=0; j&lt;7; j++){
        MAP[j][4] = 1;
    }
    for(j=2; j&lt;7; j++){
        MAP[7][j] = 1;
        MAP[15][j] = 1;
    }
    for(j=7; j&lt;16; j++){
        MAP[j][1] = 1;
        MAP[j][7] = 1;
    }
    for(j=4; j&lt;7; j++){
        MAP[10][j] = 1;
    }
    for(j=11; j&lt;15; j++){
        MAP[j][4] = 1;
    }

    //Turrets
    MAP[2][3]=2;
    MAP[5][5]=2;
    MAP[8][2]=2;
    MAP[8][6]=2;
    MAP[11][5]=2;
    MAP[14][2]=2;
    MAP[14][6]=2;

    //Tower
    MAP[15][4] = 3;
}</declaration>
		<location id="id0" x="-824" y="-459">
			<name x="-841" y="-510">Idle</name>
			<label kind="invariant" x="-841" y="-493">t&lt;=0</label>
		</location>
		<location id="id1" x="-518" y="-459">
			<name x="-561" y="-510">Configuration</name>
			<label kind="invariant" x="-535" y="-493">t&lt;=0</label>
			<label kind="testcodeExit">setMap()</label>
		</location>
		<location id="id2" x="-518" y="-289">
			<name x="-501" y="-306">Playing</name>
			<label kind="invariant" x="-501" y="-289">t&lt;=MaxTime</label>
		</location>
		<location id="id3" x="-824" y="-289">
			<name x="-875" y="-323">TowerDefeated</name>
		</location>
		<location id="id4" x="-518" y="-93">
			<name x="-501" y="-102">TowerWon</name>
		</location>
		<location id="id5" x="-816" y="-110">
			<name x="-901" y="-119">TimedOut</name>
		</location>
		<init ref="id0"/>
		<transition id="id6">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-705" y="-178">t&gt;=MaxTime</label>
			<label kind="assignment" x="-705" y="-161">TimeOut=true</label>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-510" y="-212">MainLifePoints&gt;0 &amp;&amp; 
forall (i : int[0,NUM_ENEMIES-1])
(EnemyAlive[i]==false || EnemyLeft[i]==true)</label>
			<label kind="synchronisation" x="-510" y="-153">tower_win!</label>
			<label kind="assignment" x="-510" y="-136">TowerWin=true</label>
		</transition>
		<transition id="id8">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-501" y="-391">forall (i : int[0,NUM_GREENCELLS-1]) GreenCellsOccupied[i]==1</label>
			<label kind="assignment" x="-501" y="-374">t:=0</label>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-739" y="-348">MainLifePoints&lt;=0</label>
			<label kind="synchronisation" x="-739" y="-331">tower_defeated!</label>
			<label kind="assignment" x="-739" y="-314">EnemiesWin=true</label>
		</transition>
		<transition id="id10">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-739" y="-544">place_turrets!</label>
			<label kind="assignment" x="-739" y="-527">setMap(),
Initialization(),
t:=0</label>
			<nail x="-535" y="-459"/>
		</transition>
	</template>
	<template>
		<name>Enemies</name>
		<parameter>int[0,NUM_ENEMIES-1] id</parameter>
		<declaration>clock t;

int getSpeed(int id) { //can be substituted by an array and we can call speed[EnemyType[id]]
    if (EnemyType[id] == 1) //circle
        return 1;
    else if (EnemyType[id] == 2) //square
        return 3;
    return 0;
}

bool isValid(int x, int y) {
    return x &gt;= 0 &amp;&amp; x &lt; 16 &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; 8 &amp;&amp; MAP[x][y] == 1;
}

bool isMain(int x, int y) {
    return x &gt;= 0 &amp;&amp; x &lt; 16 &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; 8 &amp;&amp; MAP[x][y] == 3;
}

int DamageTower(int id) {
    if (EnemyType[id] == 1)      //circle
        return 2;
    else if (EnemyType[id] == 2) //square
        return 4;
    return 0;
}

void attackMainTower(int id) {
    MainLifePoints -= DamageTower(id);
}</declaration>
		<location id="id11" x="-501" y="-425">
			<name x="-518" y="-476">Idle</name>
			<label kind="invariant" x="-518" y="-459">t&lt;=0</label>
		</location>
		<location id="id12" x="85" y="-425">
			<name x="68" y="-476">Spawn</name>
			<label kind="invariant" x="68" y="-459">t&lt;=0</label>
		</location>
		<location id="id13" x="93" y="-68">
			<name x="102" y="-59">Moving</name>
			<label kind="invariant" x="102" y="-42">t&lt;=getSpeed(id)</label>
		</location>
		<location id="id14" x="-272" y="76">
			<name x="-340" y="59">Attack</name>
			<label kind="invariant" x="-408" y="76">t&lt;=getSpeed(id)</label>
		</location>
		<location id="id15" x="-272" y="-68">
			<name x="-289" y="-102">Dead</name>
		</location>
		<location id="id16" x="-272" y="221">
			<name x="-306" y="238">EnemyLefted</name>
		</location>
		<location id="id17" x="-42" y="-246">
			<name x="-93" y="-280">Square</name>
			<label kind="invariant" x="-255" y="-255">t&lt;=SquarePreviousSpawn</label>
		</location>
		<location id="id18" x="221" y="-255">
			<name x="221" y="-289">Circle</name>
			<label kind="invariant" x="246" y="-263">t&lt;=CirclePreviousSpawn</label>
		</location>
		<location id="id19" x="93" y="229">
			<name x="110" y="221">TimedOut</name>
		</location>
		<init ref="id11"/>
		<transition id="id20">
			<source ref="id14"/>
			<target ref="id19"/>
			<label kind="guard" x="-76" y="187">TimeOut==true</label>
			<label kind="synchronisation" x="-76" y="204">time_out!</label>
			<nail x="-85" y="229"/>
		</transition>
		<transition id="id21">
			<source ref="id13"/>
			<target ref="id19"/>
			<label kind="guard" x="102" y="110">TimeOut==true</label>
			<label kind="synchronisation" x="102" y="127">time_out!</label>
		</transition>
		<transition id="id22">
			<source ref="id18"/>
			<target ref="id13"/>
			<label kind="guard" x="195" y="-212">t&gt;=CirclePreviousSpawn</label>
			<label kind="assignment" x="195" y="-195">EnemySpawnedTime[id]=CirclePreviousSpawn,
CirclePreviousSpawn+=2, t:=0</label>
		</transition>
		<transition id="id23">
			<source ref="id12"/>
			<target ref="id18"/>
			<label kind="guard" x="195" y="-374">NSpawnedCircle&lt;NUM_CIRCLE</label>
			<label kind="assignment" x="195" y="-357">NSpawnedCircle++,
EnemyType[id]=1, EnemyHealth[id]=10,
t:=0</label>
		</transition>
		<transition id="id24">
			<source ref="id17"/>
			<target ref="id13"/>
			<label kind="guard" x="-331" y="-204">t&gt;=SquarePreviousSpawn</label>
			<label kind="assignment" x="-331" y="-187">EnemySpawnedTime[id]=SquarePreviousSpawn,
SquarePreviousSpawn+=3, t:=0</label>
		</transition>
		<transition id="id25">
			<source ref="id12"/>
			<target ref="id17"/>
			<label kind="guard" x="-289" y="-374">NSpawnedSquare&lt;NUM_SQUARE</label>
			<label kind="assignment" x="-289" y="-357">NSpawnedSquare++,
EnemyType[id]=2, EnemyHealth[id]=20,
t:=0</label>
		</transition>
		<transition id="id26">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-425" y="-25">EnemyHealth[id]&lt;=0</label>
			<label kind="synchronisation" x="-425" y="-8">dead!</label>
			<nail x="-272" y="0"/>
		</transition>
		<transition id="id27">
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="guard" x="-161" y="-110">EnemyHealth[id]&lt;=0</label>
			<label kind="synchronisation" x="-161" y="-93">dead!</label>
		</transition>
		<transition id="id28">
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="guard" x="-569" y="153">t&gt;=getSpeed(id) &amp;&amp; EnemyHealth[id]&gt;0</label>
			<label kind="assignment" x="-399" y="170">EnemyLeft[id]=1</label>
		</transition>
		<transition id="id29">
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="select" x="331" y="-76">dir:int[0,3]</label>
			<label kind="guard" x="331" y="-59">isValid(Positions[id].x + DX[dir], Positions[id].y + DY[dir]) &amp;&amp;
!(Positions[id].x + DX[dir] == EnemyPreviousX[id] &amp;&amp; Positions[id].y + DY[dir] == EnemyPreviousY[id]) &amp;&amp;
t&gt;=getSpeed(id) &amp;&amp; !isMain(Positions[id].x + DX[dir], Positions[id].y + DY[dir]) &amp;&amp; EnemyAlive[id]==true</label>
			<label kind="assignment" x="332" y="1">EnemyPreviousX[id]=Positions[id].x,
EnemyPreviousY[id]=Positions[id].y,
Positions[id].x+=DX[dir],
Positions[id].y+=DY[dir],
t:=0</label>
			<nail x="94" y="-17"/>
			<nail x="323" y="-17"/>
			<nail x="323" y="-68"/>
		</transition>
		<transition id="id30">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="select" x="-170" y="34">dir:int[0,3]</label>
			<label kind="guard" x="-170" y="51">t&gt;=getSpeed(id) and 
isMain(Positions[id].x + DX[dir], 
Positions[id].y + DY[dir])
and EnemyAlive[id]==true</label>
			<label kind="assignment" x="-170" y="128">t:=0,attackMainTower(id)</label>
		</transition>
		<transition id="id31">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-450" y="-467">forall (i : int[0,NUM_GREENCELLS-1]) GreenCellsOccupied[i]==1</label>
			<label kind="assignment" x="-229" y="-450">t:=0</label>
		</transition>
	</template>
	<template>
		<name>Tower</name>
		<parameter>int[0,NUM_GREENCELLS-1] id</parameter>
		<declaration>clock f,t;

double getDistance(int x, int y, int x_c, int y_c) {
    int dx = x - x_c;
    int dy = y - y_c;
    double distance = sqrt(dx*dx+dy*dy);

     return distance;
}

int getTarget(int tid) {
    int r = TurretRange[TurretType[tid]];
    int xc = TurretPosition[tid].x;
    int yc = TurretPosition[tid].y;
    int xe = 0;
    int ye = 0;
    int chosenTarget = -1;

    double minDist = 10000.0;
    double dist;
    int i;

    for(i=0; i&lt;NUM_ENEMIES; i++){
        xe = Positions[i].x;
        ye = Positions[i].y;

        if (EnemyAlive[i] == 1 and EnemyLeft[i] == 0 and (xe &lt; xc + r and xe &gt; xc - r) and (ye &gt; yc - r and ye &lt; yc + r)){          

            dist = getDistance(xe,ye,xc,yc); //can be simplified

            if(chosenTarget == -1 //first target
                or dist &lt; minDist //target closest to turret
                or (dist == minDist and EnemySpawnedTime[i] &gt; EnemySpawnedTime[chosenTarget]) //same minimum distance =&gt; choose the enemy that has been present for the shortest time
                or (dist == minDist and EnemySpawnedTime[i] == EnemySpawnedTime[chosenTarget] and EnemyType[i] == 2 and EnemyType[chosenTarget] == 1)) //prioritize attaccking Squares
            {    
                chosenTarget = i;
                minDist = dist;
            }
        }
    }

    return chosenTarget;
}

void turretAttack(int tid) {
    int target = getTarget(tid);
    if (target &gt;= 0) {
        EnemyHealth[target] -= TurretDamage[TurretType[tid]];
        if (EnemyHealth[target] &lt;= 0) {
            EnemyAlive[target] = 0;
        }
    }
}</declaration>
		<location id="id32" x="-535" y="-220">
			<name x="-578" y="-254">NotPlaced</name>
		</location>
		<location id="id33" x="-170" y="-220">
			<name x="-213" y="-271">Configuration</name>
			<label kind="invariant" x="-187" y="-254">t&lt;=0</label>
		</location>
		<location id="id34" x="-561" y="127">
			<name x="-586" y="76">Attack</name>
			<label kind="invariant" x="-697" y="93">f&lt;=TurretSpeed[TurretType[id]]</label>
		</location>
		<location id="id35" x="-170" y="127">
			<name x="-153" y="119">Ready</name>
		</location>
		<location id="id36" x="-170" y="-8">
			<name x="-153" y="-25">Dispatch</name>
			<label kind="invariant" x="-153" y="-8">t&lt;=0</label>
		</location>
		<location id="id37" x="-527" y="-8">
			<name x="-578" y="-42">TurretDisabled</name>
		</location>
		<location id="id38" x="-357" y="391">
			<name x="-391" y="357">TimedOut</name>
		</location>
		<init ref="id32"/>
		<transition id="id39">
			<source ref="id34"/>
			<target ref="id38"/>
			<label kind="guard" x="-553" y="347">TimeOut==true</label>
			<label kind="synchronisation" x="-553" y="364">time_out!</label>
			<nail x="-561" y="390"/>
		</transition>
		<transition id="id40">
			<source ref="id35"/>
			<target ref="id38"/>
			<label kind="guard" x="-255" y="347">TimeOut==true</label>
			<label kind="synchronisation" x="-255" y="364">time_out!</label>
			<nail x="-170" y="390"/>
		</transition>
		<transition id="id41">
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-162" y="34">TurretType[id]!=0</label>
			<label kind="assignment" x="-162" y="51">GreenCellsOccupied[id]=true</label>
		</transition>
		<transition id="id42">
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="guard" x="-442" y="-51">TurretType[id]==0</label>
			<label kind="assignment" x="-442" y="-34">GreenCellsOccupied[id]=true</label>
		</transition>
		<transition id="id43">
			<source ref="id33"/>
			<target ref="id36"/>
			<label kind="select" x="-162" y="-161">type : int[0,3]</label>
			<label kind="assignment" x="-162" y="-144">TurretPosition[id]=GreenCellsPositions[id],
TurretType[id]=type,
t:=0</label>
		</transition>
		<transition id="id44">
			<source ref="id34"/>
			<target ref="id34"/>
			<label kind="guard" x="-909" y="127">getTarget(id)&gt;=0 &amp;&amp; 
f&gt;=TurretSpeed[TurretType[id]]</label>
			<label kind="assignment" x="-909" y="161">turretAttack(id), f:=0</label>
			<nail x="-586" y="186"/>
			<nail x="-654" y="186"/>
			<nail x="-654" y="127"/>
		</transition>
		<transition id="id45">
			<source ref="id34"/>
			<target ref="id35"/>
			<label kind="guard" x="-476" y="195">f&gt;=TurretSpeed[TurretType[id]] &amp;&amp; 
getTarget(id)&lt;0</label>
			<label kind="assignment" x="-476" y="237">f:=0</label>
			<nail x="-357" y="195"/>
		</transition>
		<transition id="id46">
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="-408" y="85">getTarget(id)&gt;=0</label>
			<label kind="synchronisation" x="-408" y="102">fire!</label>
			<label kind="assignment" x="-408" y="68">turretAttack(id), f:=0</label>
		</transition>
		<transition id="id47">
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-408" y="-263">place_turrets?</label>
			<label kind="assignment" x="-374" y="-246">t:=0</label>
		</transition>
	</template>
	<system>
system  User,Enemies,Tower;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
		</query>
	</queries>
</nta>
